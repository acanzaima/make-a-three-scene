import{P as v,d as w,B as f,q as d,r as y,o as g,t as S,W as C,p as M}from"./three.module.efc437e6.js";import{p as D,B as P,C as _,w as E,o as A,k as T,l as X,e as b,n as W}from"./index.0065e310.js";class x{constructor(e,o,n,t,i){typeof e=="string"?this.sceneDom=document.querySelector(e):this.sceneDom=e,this.amountX=o||50,this.amountY=n||50,this.color=t||"#00bfff",this.top=i||350,this.count=0,this.mouseX=0,this.windowHalfX=window.innerWidth/2,this.camera=null,this.scene=null,this.particles=null,this.renderer=null,this.isInit=!1}init(){const o=window.innerWidth,n=window.innerHeight,t=document.createElement("div");t.style.position="relative",t.style.top=`${this.top}px`,t.style.height=`${n-this.top}px`,this.sceneDom.appendChild(t),this.camera=new v(60,o/n,1,1e4),this.camera.position.z=1e3,this.scene=new w;const i=this.amountX*this.amountY,s=new Float32Array(i*3),u=new Float32Array(i);let a=0,m=0;for(let h=0;h<this.amountX;h++)for(let c=0;c<this.amountY;c++)s[a]=h*100-this.amountX*100/2,s[a+1]=0,s[a+2]=c*100-this.amountY*100/2,u[m]=1,a+=3,m++;const r=new f;r.setAttribute("position",new d(s,3)),r.setAttribute("scale",new d(u,1));const p=new y({uniforms:{color:{value:new g(this.color)}},vertexShader:`
        attribute float scale;
        void main() {
          vec4 mvPosition = modelViewMatrix * vec4( position, 2.0 );
          gl_PointSize = scale * ( 370.0 / - mvPosition.z );
          gl_Position = projectionMatrix * mvPosition;
        }
      `,fragmentShader:`
        uniform vec3 color;
        void main() {
          if ( length( gl_PointCoord - vec2( 0.5, 0.5 ) ) > 0.475 ) discard;
          gl_FragColor = vec4( color, 1.0 );
        }
      `});this.particles=new S(r,p),this.scene.add(this.particles),this.renderer=new C({antialias:!0,alpha:!0}),this.renderer.setSize(t.clientWidth,t.clientHeight),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setClearAlpha(0),t.appendChild(this.renderer.domElement),this.onWindowResizeCopy=this.onWindowResize.bind(this),this.onDocumentMouseMoveCopy=this.onDocumentMouseMove.bind(this),this.onDocumentTouchStartCopy=this.onDocumentTouchStart.bind(this),this.onDocumentTouchMoveCopy=this.onDocumentTouchMove.bind(this),this.addListeners()}render(){this.camera.position.x+=(this.mouseX-this.camera.position.x)*.05,this.camera.position.y=400,this.camera.lookAt(this.scene.position);const e=this.particles.geometry.attributes.position.array,o=this.particles.geometry.attributes.scale.array;let n=0,t=0;for(let i=0;i<this.amountX;i++)for(let s=0;s<this.amountY;s++)e[n+1]=Math.sin((i+this.count)*.3)*100+Math.sin((s+this.count)*.5)*100,o[t]=(Math.sin((i+this.count)*.3)+1)*8+(Math.sin((s+this.count)*.5)+1)*8,n+=3,t++;this.particles.geometry.attributes.position.needsUpdate=!0,this.particles.geometry.attributes.scale.needsUpdate=!0,this.renderer.render(this.scene,this.camera),this.count+=.1}resize(){this.camera.aspect=this.sceneDom.clientWidth/this.sceneDom.clientHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.sceneDom.clientWidth,this.sceneDom.clientHeight)}addListeners(){window.addEventListener("resize",this.onWindowResizeCopy,{passive:!1}),document.addEventListener("mousemove",this.onDocumentMouseMoveCopy,{passive:!1}),document.addEventListener("touchstart",this.onDocumentTouchStartCopy,{passive:!1}),document.addEventListener("touchmove",this.onDocumentTouchMoveCopy,{passive:!1})}removeListeners(){window.removeEventListener("resize",this.onWindowResizeCopy,{passive:!1}),document.removeEventListener("mousemove",this.onDocumentMouseMoveCopy,{passive:!1}),document.removeEventListener("touchstart",this.onDocumentTouchStartCopy,{passive:!1}),document.removeEventListener("touchmove",this.onDocumentTouchMoveCopy,{passive:!1})}onDocumentMouseMove(e){this.mouseX=e.clientX-this.windowHalfX}onDocumentTouchStart(e){e.touches.length===1&&(this.mouseX=e.touches[0].pageX-this.windowHalfX)}onDocumentTouchMove(e){e.touches.length===1&&(e.preventDefault(),this.mouseX=e.touches[0].pageX-this.windowHalfX)}onWindowResize(){this.windowHalfX=window.innerWidth/2,this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}run(){this.isInit||(this.init(),this.isInit=!0),this.intervalFrameId=requestAnimationFrame(this.run.bind(this)),this.render()}stop(){this.removeListeners(),cancelAnimationFrame(this.intervalFrameId)}}const z={__name:"ScenePage",props:{foldChange:{type:Boolean}},setup(l){const e=l;let o={};return P(()=>{o=new x(".wave-wrapper"),o.run()}),_(()=>{o.stop()}),E(()=>e.foldChange,()=>{setTimeout(()=>{o.resize()},350)}),(n,t)=>(A(),T(M,null,{default:X(({theme:i})=>[b("div",{class:W(["wave-wrapper",i]),onSatellite:t[0]||(t[0]=(...s)=>n.getSelectName&&n.getSelectName(...s))},null,34)]),_:1}))}},I=D(z,[["__scopeId","data-v-2f49909b"]]);export{I as default};
